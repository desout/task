import { div } from './src/divide';
import { subtract } from './src/subtract';
import { forkJoin, Observable, of } from 'rxjs';
import { flatMap } from 'rxjs/operators';

/*
const a = '44324234234234365498678562423423423';
const k = '960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719';
console.time();
const value = div(a,'17',true);
console.timeEnd();
console.log(value);
console.log(value === '960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841762269187993664023224301438324981296');
*/

interface obj{
  name: number;
  value: string;
}
const func = (): Observable<number[]> =>{
  const array = [1,2,3,4,5,6,7];
  return of(array);
}
const funcSec = (index: number): Observable<obj[]> => {

  let array: obj[]= [];
  for(let i=0 ;i<5;i++){
    array.push({name:i,value:`${index*10}`});
  }
  return of(array);
}
const mainFunc = (): Observable<{ vendor: number, offices: obj[] }[]> => {
  return func()
    .pipe(flatMap((result : number[]) => {
      return forkJoin(
        result.map((letVendor : number) => funcSec(letVendor).pipe(flatMap((offices: obj[]) => {
          return of({vendor: letVendor, offices: (letVendor === 2 ? [] : offices)})
        }))));
    }));
};

mainFunc()
  .subscribe((vendors: {vendor: number, offices: obj[]}[]) => {
    console.log(vendors);
    vendors.map((vendor)=> console.log(vendor.offices));
    vendors.filter((vendor) => vendor.offices);
  });